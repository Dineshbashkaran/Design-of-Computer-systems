module dabRISC621_v (Resetn_pin, Clock_pin, SW_pin, Display_pin);

	input	Resetn_pin, Clock_pin;
	input	[4:0] SW_pin;			// Four switches and one push-button
	output [7:0] Display_pin;	// 8 LEDs
//----------------------------------------------------------------------------
//-- Declare machine cycle and instruction cycle parameters
//----------------------------------------------------------------------------
	parameter [1:0] MC0=2'b00, MC1=2'b01, MC2=2'b10, MC3=2'b11;
	parameter [5:0] 	ADD_IC=6'b000000,
							SUB_IC=6'b000001, 
							ADDC_IC=6'b000010, 
							SUBC_IC =6'b000011, 
							NOT_IC=6'b000100, 
							AND_IC=6'b000101,
							OR_IC=6'b000110,
							SHRL_IC = 6'b000111  ,
							SHRA_IC=6'b001000, 
							ROTL_IC=6'b001001  ,
							ROTR_IC=6'b001010,
							RRC_IC=6'b001011, 
							RRV_IC=6'b001100,
							RLC_IC=6'b001101,
							RLV_IC=6'b001110,
							MUL_IC=6'b001111,
							DIV_IC=6'b010000,
							XOR_IC=6'b010001,
							SWAP_IC=6'b010010,
							CPY_IC=6'b010011,
							LD_IC=6'b010100,
							ST_IC=6'b010101,
							JMP_IC=6'b010110,
							CALL_IC = 6'b010111,
							RET_IC= 6'b011000;
							
		
	parameter [3:0] JU=4'b0000, JC1=4'b1000, JN1=4'b0100, JV1=4'b0010, 
		JZ1=4'b0001, JC0=4'b0111, JN0=4'b1011, JV0=4'b1101, JZ0=4'b1110;
//----------------------------------------------------------------------------
//-- Declare internal signals
//----------------------------------------------------------------------------
	reg [13:0] R [15:0];
	reg	WR_DM;
	reg [1:0] MC;
	reg [13:0] PC, IR, MAB, MAX, MAeff, SP, DM_in, IPDR, X ;
	reg [13:0] TA, TB, TALUH, TALUL;
	reg [11:0] TSR, SR;
	reg [7:0] Display_pin;
	reg [14:0]	TALUout;
	reg [27:0] MULT;
	wire [13:0]	PM_out, DM_out;
	wire 			C, Clock_not;
	integer Ri, Rj;
//----------------------------------------------------------------------------
// In this architecture we are using a combination of structural and 
// 	behavioral code.  Care has to be excercised because the values assigned
//		in the process are visible outside of it only during the next clock 
//		cycle.  The CPU comprised of the DP and CU is modeled as a combination
// 	of CASE and IF statements (behavioral).  The memories are called within
// 	the structural part of the code.  We could model the memories as
//		arrays, but that would result in less than optimal memory 
//		implementations.  Also, later on we will want to add an hierarchcial 
//		memory subsystem.
//----------------------------------------------------------------------------
// Structural section of the code.  The order of the assignments doesn't 
// 	matter.  Concurrency!
//----------------------------------------------------------------------------
		assign	Clock_not = ~Clock_pin;
//----------------------------------------------------------------------------
// Instantiating only 1KWord memories to save resources
//----------------------------------------------------------------------------
		dabRISC621_rom	my_rom	(PC[13:0], Clock_not, PM_out);
		dabRISC621_ram	my_ram	(MAeff[13:0], Clock_not, DM_in,
										WR_DM, DM_out);
//----------------------------------------------------------------------------
//	Behavioral section of the code.  Assignments are evaluated in order, i.e.
// 	sequentially. New assigned values are visible outside the always block 
// 	only after it is exit.  Last assigned value will be the exit value.
//----------------------------------------------------------------------------
		always@(posedge Clock_pin)
//----------------------------------------------------------------------------
// The reset is active low and clock synchronous.  For verification/simulation
// 	purposes it is necessary in this case to initialize the value of regA.
//----------------------------------------------------------------------------
				if (Resetn_pin == 0)
					begin	
					PC = 14'h0000;
					R[0] = 10; R[1] = 5; R[2] = 0; R[3] = 5;
					R[4] = 0; R[5] = 0; R[6] = 0; R[7] = 0;
					R[8] = 5; R[9] = 4; R[10] = 0; R[11] = 0;
					R[12] = 0; R[13] = 0; R[14] = 5; R[15] = 10;	// Necessary for sim
					MC = MC0;
					SP = 100;
					end
				else	begin
//----------------------------------------------------------------------------
// The first level CASE statement selects execution based on the current
// 	machine cycle.
//----------------------------------------------------------------------------
					case (MC)
						MC0:
							begin
								IR = PM_out;
								Ri = PM_out[7:4];
								Rj = PM_out[3:0];
								PC = PC + 1'b1;
								WR_DM = 1'b0;
								MC = MC1;
			
							end
//----------------------------------------------------------------------------
// The second level CASE statements select assignments based on the OpCodes.
// You could switch the case statements, i.e. have the OpCodes at the first
// 	level and the MCs at the second level.
//----------------------------------------------------------------------------
						MC1: begin
							case (IR[13:8])
							
								RET_IC:
									begin
										MAeff = SP;
										SR 	= DM_out;
										SP		= SP + 1'b1; 
									end
								CALL_IC:
									begin
										MAB = PM_out;
										PC = PC + 1'b1;
										SP = SP - 1'b1;
											WR_DM = 1'b1;
												
										if (Ri == 0)
											begin
											MAX = 0;
											end
										else if(Ri == 1)
											begin
											MAX = PC;
											end
										else if( Ri == 2)
											begin
											MAX = SP; 
											end
										else
											begin
											MAX = R[Ri];
											end
									end
				
								ST_IC, LD_IC, JMP_IC:
									begin
										MAB = PM_out;
										PC = PC +1'b1 ;
										
										if (Ri == 0)
											begin
											MAX = 0;
											end
										else if(Ri == 1)
											begin
											MAX = PC;
											end
										else if( Ri == 2)
											begin
											MAX = SP; 
											end
										else
											begin
											MAX = R[Ri];
											end
									end		
											
								NOT_IC, SHRA_IC, ROTR_IC, ROTL_IC, SHRL_IC,RRC_IC, RRV_IC, RLC_IC, RLV_IC:
									begin
										TA = R[Ri];
									end
								ADDC_IC, SUBC_IC:
									begin
										TA = R[Ri];
										TB = {10'b0000000000, IR[3:0]};
									end
								MUL_IC, DIV_IC:
									 begin
										TA = R[Ri];
										TB = R[Rj];
									end
								CPY_IC:
										begin
											TB = R[Rj];
										end
								default: 
		//SWAP_IC  ADD_IC, SUB_IC, AND_IC, OR_IC:
									begin
										TA = R[Ri];
										TB = R[Rj];
									end
							endcase
							MC = MC2;
						end
//----------------------------------------------------------------------------
						MC2:	begin
							case (IR[13:8])

//----------------------------------------------------------------------------
// For all assignments that target TALUH we use TALUout.  This is 17-bits wide
// 	to account for the value of the carry when necessary.
//----------------------------------------------------------------------------
								RET_IC:
									begin
										MAeff = SP; 
										
										SP		= SP + 1'b1;
									end
								CALL_IC:
									begin
										MAeff = SP;
										DM_in = PC ;
										X = MAX + MAB ;	
										SP = SP - 1'b1 ;
									end
									
									
									
								LD_IC, JMP_IC :
									begin
										MAeff = MAB + MAX ;
									end
									
								 ST_IC:
										begin
												MAeff = MAB + MAX;
												WR_DM = 1'b1;
												DM_in = R[Rj];
									end
										
								SWAP_IC:
									begin
										
										TALUH = TA;
										TALUL = TB;
										
									end
								
								CPY_IC:
									begin
										TALUL = TB;
									end
								
								
								
								ADD_IC, ADDC_IC:
									begin
										TALUout = TA + TB;
										TSR[11] = TALUout[14]; // Carry
										TSR[10] = TALUout[13]; // Negative
										TSR[9] = ((TA[13] ~^ TB[13]) & TA[13]) ^ (TALUout[13] & (TA[13] ~^ TB[13])); // V Overflow
										if (TALUout[13:0] == 0)
											TSR[8] = 1;	// Zero
											else
											TSR[8] = 0;
										TALUH = TALUout[13:0];
									end
								SUB_IC, SUBC_IC:
									begin
										TALUout = TA - TB;
										TSR[11] = TALUout[14]; // Carry
										TSR[10] = TALUout[13]; // Negative
										TSR[9] = ((TA[13] ~^ TB[13]) & TA[13]) ^ (TALUout[13] & (TA[13] ~^ TB[13])); // V Overflow
										if (TALUout[13:0] == 0)
											TSR[8] = 1;	// Zero
											else
											TSR[8] = 0;
										TALUH = TALUout[13:0];
									end
								MUL_IC:
									begin
											MULT[27:0] = TA * TB;
											TALUH[13:0] = MULT[27:15]; 
											TALUL[13:0] = MULT[15:0]; 
												if (MULT[27:0] == 0)
											TSR[8] = 1;	// Zero
											else
											TSR[8] = 0;
									end
							  	DIV_IC:
									begin
											TALUH = TA / TB;
											TALUL = TA%TB; 
											if (TALUH == 0)
											TSR[8] = 1;	// Zero
											else
											TSR[8] = 0;
									end
													
											
								NOT_IC:
									begin
										TALUH = ~TA;
									end
								AND_IC:
									begin
										TALUH = TA & TB;
										TSR[10] = TALUH[13]; // Negative
										if (TALUH[13:0] == 0)
											TSR[8] = 1;	// Zero
											else
											TSR[8] = 0;
									end
								OR_IC:
									begin
										TALUH = TA | TB;
										TSR[10] = TALUH[13]; // Negative
										if (TALUH[13:0] == 0)
											TSR[8] = 1;	// Zero
											else
											TSR[8] = 0;
									end
								XOR_IC:
									begin
										 TALUH = TA ^ TB;
										TSR[10] = TALUH[13]; // Negative
										if (TALUH[13:0] == 0)
											TSR[8] = 1;	// Zero
											else
											TSR[8] = 0;
									end
								SHRL_IC:
									begin
										case (IR[7:4])
											4'b0000:
												begin
													TALUH = TA;
												end
											4'b0001:
												begin
													TALUH[13]=TA[0]; TALUH[12:0]=TA[13:1]; 
												end
											4'b0010:
												begin
													TALUH[13:12]=TA[0]; TALUH[11:0]=TA[13:2]; 
												end
											4'b0011:
												begin
													TALUH[13:11]=TA[0]; TALUH[10:0]=TA[13:3]; 
												end
											4'b0100:
												begin
													TALUH[13:10]=TA[0]; TALUH[9:0]=TA[13:4]; 
												end
											4'b0101:
												begin
													TALUH[13:9]=TA[0]; TALUH[8:0]=TA[13:5]; 
												end
											4'b0110:
												begin
													TALUH[13:8]=TA[0]; TALUH[7:0]=TA[13:6]; 
												end
											4'b0111:
												begin
													TALUH[13:7]=TA[0]; TALUH[6:0]=TA[13:7]; 
												end
											4'b1000:
												begin
													TALUH[13:6]=TA[0]; TALUH[5:0]=TA[13:8]; 
												end
											4'b1001:
												begin
													TALUH[13:5]=TA[0]; TALUH[4:0]=TA[13:9]; 
												end
											4'b1010:
												begin
													TALUH[13:4]=TA[0]; TALUH[3:0]=TA[13:10]; 
												end
											4'b1011:
												begin
													TALUH[13:3]=TA[0]; TALUH[2:0]=TA[13:11]; 
												end
											4'b1100:
												begin
													TALUH[13:2]=TA[0]; TALUH[1:0]=TA[13:12]; 
												end
											4'b1101:
												begin
													TALUH[13:1]=TA[0]; TALUH[0]=TA[13]; 
												end
											4'b1110:
												begin
													TALUH[13:0]=TA[0]; 
												end
												4'b1111:
												begin
													TALUH[13:0]=TA[0];
												end
											endcase
									end
								SHRA_IC:
									begin
										case (IR[7:4])
											4'b0000:
												begin
													TALUH = TA;
												end
											4'b0001:
												begin
													TALUH[13]=TA[13]; TALUH[12:0]=TA[13:1]; 
												end
											4'b0010:
												begin
													TALUH[13:12]=TA[13]; TALUH[11:0]=TA[13:2]; 
												end
											4'b0011:
												begin
													TALUH[13:11]=TA[13]; TALUH[10:0]=TA[13:3]; 
												end
											4'b0100:
												begin
													TALUH[13:10]=TA[13]; TALUH[9:0]=TA[13:4]; 
												end
											4'b0101:
												begin
													TALUH[13:9]=TA[13]; TALUH[8:0]=TA[13:5]; 
												end
											4'b0110:
												begin
													TALUH[13:8]=TA[13]; TALUH[7:0]=TA[13:6]; 
												end
											4'b0111:
												begin
													TALUH[13:7]=TA[13]; TALUH[6:0]=TA[13:7]; 
												end
											4'b1000:
												begin
													TALUH[13:6]=TA[13]; TALUH[5:0]=TA[13:8]; 
												end
											4'b1001:
												begin
													TALUH[13:5]=TA[13]; TALUH[4:0]=TA[13:9]; 
												end
											4'b1010:
												begin
													TALUH[13:4]=TA[13]; TALUH[3:0]=TA[13:10]; 
												end
											4'b1011:
												begin
													TALUH[13:3]=TA[13]; TALUH[2:0]=TA[13:11]; 
												end
											4'b1100:
												begin
													TALUH[13:2]=TA[13]; TALUH[1:0]=TA[13:12]; 
												end
											4'b1101:
												begin
													TALUH[13:1]=TA[13]; TALUH[0]=TA[13]; 
												end
											4'b1110:
												begin
													TALUH[13:0]=TA[13]; 
												end
												4'b1111:
												begin
													TALUH[13:0]=TA[13];
												end
											endcase
									end
								 ROTR_IC:
									begin
										case (IR[7:4])
									4'b0000:
												begin
													TALUH = TA;
												end
											4'b0001:
												begin
													TALUH[13]=TA[0]; TALUH[12:0]=TA[13:1]; 
												end
											4'b0010:
												begin
													TALUH[13:12]=TA[1:0]; TALUH[11:0]=TA[13:2]; 
												end
											4'b0011:
												begin
													TALUH[13:11]=TA[2:0]; TALUH[10:0]=TA[13:3]; 
												end
											4'b0100:
												begin
													TALUH[13:10]=TA[3:0]; TALUH[9:0]=TA[13:4]; 
												end
											4'b0101:
												begin
													TALUH[13:9]=TA[4:0]; TALUH[8:0]=TA[13:5]; 
												end
											4'b0110:
												begin
													TALUH[13:8]=TA[5:0]; TALUH[7:0]=TA[13:6]; 
												end
											4'b0111:
												begin
													TALUH[13:7]=TA[6:0]; TALUH[6:0]=TA[13:7]; 
												end
											4'b1000:
												begin
													TALUH[13:6]=TA[7:0]; TALUH[5:0]=TA[13:8]; 
												end
											4'b1001:
												begin
													TALUH[13:5]=TA[8:0]; TALUH[4:0]=TA[13:9]; 
												end
											4'b1010:
												begin
													TALUH[13:4]=TA[9:0]; TALUH[3:0]=TA[13:10]; 
												end
											4'b1011:
												begin
													TALUH[13:3]=TA[10:0]; TALUH[2:0]=TA[13:11]; 
												end
											4'b1100:
												begin
													TALUH[13:2]=TA[11:0]; TALUH[1:0]=TA[13:12]; 
												end
											4'b1101:
												begin
													TALUH[13:1]=TA[12:0]; TALUH[0]=TA[13]; 
												end
											4'b1110:
												begin
													TALUH[13:0]=TA[13:0]; 
												end
											4'b1111:
												begin
													TALUH[13]=TA[0]; TALUH[12:0]=TA[13:1]; 
												end
											endcase
									end
									
								 ROTL_IC:
									begin
										case (IR[7:4])
									4'b0000:
												begin
													TALUH = TA;
												end
											4'b0001:
												begin
													TALUH[13:1]=TA[12:0]; TALUH[0]=TA[13]; 
												end
											4'b0010:
												begin
													TALUH[13:2]=TA[11:0]; TALUH[1:0]=TA[13:12]; 
												end
											4'b0011:
												begin
													TALUH[13:3]=TA[10:0]; TALUH[2:0]=TA[13:11]; 
												end
											4'b0100:
												begin
													TALUH[13:4]=TA[9:0]; TALUH[3:0]=TA[13:10]; 
												end
											4'b0101:
												begin
													TALUH[13:5]=TA[8:0]; TALUH[4:0]=TA[13:9]; 
												end
											4'b0110:
												begin
													TALUH[13:6]=TA[7:0]; TALUH[5:0]=TA[13:8]; 
												end
											4'b0111:
												begin
													TALUH[13:7]=TA[6:0]; TALUH[6:0]=TA[13:7]; 
												end
											4'b1000:
												begin
													TALUH[13:8]=TA[5:0]; TALUH[7:0]=TA[13:6]; 
												end
											4'b1001:
												begin
													TALUH[13:9]=TA[4:0]; TALUH[8:0]=TA[13:5]; 
												end
											4'b1010:
												begin
													TALUH[13:10]=TA[3:0]; TALUH[9:0]=TA[13:4]; 
												end
											4'b1011:
												begin
													TALUH[13:11]=TA[2:0]; TALUH[10:0]=TA[13:3]; 
												end
											4'b1100:
												begin
													TALUH[13:12]=TA[1:0]; TALUH[11:0]=TA[13:2]; 
												end
											4'b1101:
												begin
													TALUH[13]=TA[0]; TALUH[12:0]=TA[13:1]; 
												end
											4'b1110:
												begin
													TALUH = TA; 
												end
											4'b1111:
												begin
													TALUH[13:1]=TA[12:0]; TALUH[0]=TA[13];
												end
											endcase
									end	
								RLC_IC:
									begin
									case (IR[7:4])
										4'b0000:
												begin
													TALUH = TA;
												end
										4'b0001:
												begin
													TALUH[13:1]=TA[12:0]; TALUH[0]=TSR[11]; TSR[11]= TA[13];
												end
										4'b0010:
												begin
													TALUH[13:2]=TA[11:0]; TALUH[1]=TSR[11]; TALUH[0]=TA [13]; TSR[11]= TA[12];
												end
										4'b0011:
												begin
													TALUH[13:3]=TA[10:0]; TALUH[2]=TSR[11]; TALUH[1]=TA[13]; TALUH[0]=TA[12]; TSR[11]=TA[11];
												end
										4'b0100:
												begin
													TALUH[13:4]=TA[9:0]; TALUH[3]=TSR[11]; TALUH[2]=TA[13]; TALUH[1]=TA[12]; TALUH[0]=TA[11]; TSR[11]=TA[10];
												end
										4'b0101:
												begin
													TALUH[13:5]=TA[8:0]; TALUH[4]=TSR[11]; TALUH[3]=TA[13]; TALUH[2]=TA[12]; TALUH[1]=TA[11]; TALUH[0]=TA[10]; TSR[11]=TA[9];
												end
										4'b0110:
												begin
													TALUH[13:6]=TA[7:0]; TALUH[5]=TSR[11]; TALUH[4]=TA[13]; TALUH[3]=TA[12]; TALUH[2]=TA[11]; TALUH[1]=TA[10]; TALUH[0]=TA[9]; TSR[11]=TA[8];
												end
										4'b0111:
												begin
													TALUH[13:7]=TA[6:0]; TALUH[6]=TSR[11]; TALUH[5]=TA[13]; TALUH[4]=TA[12]; TALUH[3]=TA[11]; TALUH[2]=TA[10]; TALUH[1]=TA[9]; TALUH[0]=TA[8]; TSR[11]=TA[7];
												end
										4'b1000:
												begin
													TALUH[13:8]=TA[5:0]; TALUH[7]=TSR[11]; TALUH[6]=TA[13]; TALUH[5]=TA[12]; TALUH[4]=TA[11]; TALUH[3]=TA[10]; TALUH[2]=TA[9]; TALUH[1]=TA[8]; TALUH[0]=TA[7]; TSR[11]=TA[6];
												end
										4'b1001:
												begin
													TALUH[13:9]=TA[4:0]; TALUH[8]=TSR[11]; TALUH[7]=TA[13]; TALUH[6]=TA[12]; TALUH[5]= TA[11]; TALUH[4]=TA[10]; TALUH[3]=TA[9]; TALUH[2]=TA[8]; TALUH[1]=TA[7]; TALUH[0]=TA[6]; TSR[11]=TA[5];
												end
										4'b1010:
												begin
													TALUH[13:10]=TA[3:0]; TALUH[9]=TSR[11]; TALUH[8]=TA[13]; TALUH[7]=TA[12]; TALUH[6]=TA[11]; TALUH[5]=TA[10]; TALUH[4]=TA[9]; TALUH[3]=TA[8]; TALUH[2]=TA[7]; TALUH[1]=TA[6]; TALUH[0]=TA[5]; TSR[11]=TA[4];
												end
										4'b1011:
												begin
													TALUH[13:11]=TA[2:0]; TALUH[10]=TSR[11]; TALUH[9]=TA[13]; TALUH[8]=TA[12]; TALUH[7]=TA[11]; TALUH[6]=TA[10]; TALUH[5]=TA[9]; TALUH[4]=TA[8]; TALUH[3]=TA[7]; TALUH[2]=TA[6]; TALUH[1]=TA[5]; TALUH[0]=TA[4]; TSR[11]=TA[3];
												end
										4'b1100:
												begin
													TALUH[13:12]=TA[1:0]; TALUH[11]=TSR[11]; TALUH[10]=TA[13]; TALUH[9]=TA[12]; TALUH[8]=TA[11]; TALUH[7]=TA[10]; TALUH[6]=TA[9]; TALUH[5]=TA[8]; TALUH[4]=TA[7]; TALUH[2]=TA[6]; TALUH[2]=TA[5]; TALUH[1]=TA[4]; TALUH[0]=TA[2];  TSR[11]=TA[2];
												end
										4'b1101:
												begin
													TALUH[13]=TA[0]; TALUH[12]=TSR[11]; TALUH[10]=TA[13]; TALUH[9]=TA[12]; TALUH[8]=TA[11]; TALUH[7]=TA[10]; TALUH[6]=TA[9]; TALUH[5]=TA[8]; TALUH[4]=TA[7]; TALUH[2]=TA[6]; TALUH[2]=TA[5]; TALUH[1]=TA[4]; TALUH[0]=TA[2];  TSR[11]=TA[2];
												end
										4'b1110:
												begin
													TALUH[13]=TSR[11]; TALUH[12]=TA[13]; TALUH[11]=TA[12]; TALUH[10]=TA[11]; TALUH[9]=TA[10]; TALUH[8]=TA[9]; TALUH[7]=TA[8]; TALUH[6]=TA[7]; TALUH[5]=TA[6]; TALUH[4]=TA[5]; TALUH[3]=TA[4]; TALUH[2]=TA[3]; TALUH[1]=TA[2]; TALUH[0]=TA[1];  TSR[11]=TA[0];	
												end
										4'b1111:
												begin
													TALUH=TA;
												end
												endcase
									end
									
									
								RLV_IC:
									begin
									case (IR[7:4])
										4'b0000:
												begin
													TALUH = TA;
												end
										4'b0001:
												begin
													TALUH[13:1]=TA[12:0]; TALUH[0]=TSR[9]; TSR[9]= TA[13];
												end
										4'b0010:
												begin
													TALUH[13:2]=TA[11:0]; TALUH[1]=TSR[9]; TALUH[0]=TA [13]; TSR[9]= TA[12];
												end
										4'b0011:
												begin
													TALUH[13:3]=TA[10:0]; TALUH[2]=TSR[9]; TALUH[1]=TA[13]; TALUH[0]=TA[12]; TSR[9]=TA[11];
												end
										4'b0100:
												begin
													TALUH[13:4]=TA[9:0]; TALUH[3]=TSR[9]; TALUH[2]=TA[13]; TALUH[1]=TA[12]; TALUH[0]=TA[11]; TSR[9]=TA[10];
												end
										4'b0101:
												begin
													TALUH[13:5]=TA[8:0]; TALUH[4]=TSR[9]; TALUH[3]=TA[13]; TALUH[2]=TA[12]; TALUH[1]=TA[11]; TALUH[0]=TA[10]; TSR[9]=TA[9];
												end
										4'b0110:
												begin
													TALUH[13:6]=TA[7:0]; TALUH[5]=TSR[9]; TALUH[4]=TA[13]; TALUH[3]=TA[12]; TALUH[2]=TA[11]; TALUH[1]=TA[10]; TALUH[0]=TA[9]; TSR[9]=TA[8];
												end
										4'b0111:
												begin
													TALUH[13:7]=TA[6:0]; TALUH[6]=TSR[9]; TALUH[5]=TA[13]; TALUH[4]=TA[12]; TALUH[3]=TA[11]; TALUH[2]=TA[10]; TALUH[1]=TA[9]; TALUH[0]=TA[8]; TSR[9]=TA[7];
												end
										4'b1000:
												begin
													TALUH[13:8]=TA[5:0]; TALUH[7]=TSR[9]; TALUH[6]=TA[13]; TALUH[5]=TA[12]; TALUH[4]=TA[11]; TALUH[3]=TA[10]; TALUH[2]=TA[9]; TALUH[1]=TA[8]; TALUH[0]=TA[7]; TSR[9]=TA[6];
												end
										4'b1001:
												begin
													TALUH[13:9]=TA[4:0]; TALUH[8]=TSR[9]; TALUH[7]=TA[13]; TALUH[6]=TA[12]; TALUH[5]= TA[11]; TALUH[4]=TA[10]; TALUH[3]=TA[9]; TALUH[2]=TA[8]; TALUH[1]=TA[7]; TALUH[0]=TA[6]; TSR[9]=TA[5];
												end
										4'b1010:
												begin
													TALUH[13:10]=TA[3:0]; TALUH[9]=TSR[9]; TALUH[8]=TA[13]; TALUH[7]=TA[12]; TALUH[6]=TA[11]; TALUH[5]=TA[10]; TALUH[4]=TA[9]; TALUH[3]=TA[8]; TALUH[2]=TA[7]; TALUH[1]=TA[6]; TALUH[0]=TA[5]; TSR[9]=TA[4];
												end
										4'b1011:
												begin
													TALUH[13:11]=TA[2:0]; TALUH[10]=TSR[9]; TALUH[9]=TA[13]; TALUH[8]=TA[12]; TALUH[7]=TA[11]; TALUH[6]=TA[10]; TALUH[5]=TA[9]; TALUH[4]=TA[8]; TALUH[3]=TA[7]; TALUH[2]=TA[6]; TALUH[1]=TA[5]; TALUH[0]=TA[4]; TSR[9]=TA[3];
												end
										4'b1100:
												begin
													TALUH[13:12]=TA[1:0]; TALUH[11]=TSR[9]; TALUH[10]=TA[13]; TALUH[9]=TA[12]; TALUH[8]=TA[11]; TALUH[7]=TA[10]; TALUH[6]=TA[9]; TALUH[5]=TA[8]; TALUH[4]=TA[7]; TALUH[2]=TA[6]; TALUH[2]=TA[5]; TALUH[1]=TA[4]; TALUH[0]=TA[2];  TSR[9]=TA[2];
												end
										4'b1101:
												begin
													TALUH[13]=TA[0]; TALUH[12]=TSR[9]; TALUH[10]=TA[13]; TALUH[9]=TA[12]; TALUH[8]=TA[11]; TALUH[7]=TA[10]; TALUH[6]=TA[9]; TALUH[5]=TA[8]; TALUH[4]=TA[7]; TALUH[2]=TA[6]; TALUH[2]=TA[5]; TALUH[1]=TA[4]; TALUH[0]=TA[2];  TSR[9]=TA[2];
												end
										4'b1110:
												begin
													TALUH[13]=TSR[9]; TALUH[12]=TA[13]; TALUH[11]=TA[12]; TALUH[10]=TA[11]; TALUH[9]=TA[10]; TALUH[8]=TA[9]; TALUH[7]=TA[8]; TALUH[6]=TA[7]; TALUH[5]=TA[6]; TALUH[4]=TA[5]; TALUH[3]=TA[4]; TALUH[2]=TA[3]; TALUH[1]=TA[2]; TALUH[0]=TA[1];  TSR[9]=TA[0];	
												end
										4'b1111:
												begin
													TALUH=TA;
												end
												endcase
									end
										
									
									
									
								RRC_IC:
									begin
									case (IR[7:4])
									4'b0000:
											begin
												TALUH = TA; 
											end
											
									4'b0001:
											begin
												TALUH[13]=TSR[11]; TALUH[12:0]=TA[13:1]; TSR[11]=TA[0];
											end
											
									4'b0010:
											begin
												TALUH[13]=TA[0]; TALUH[12]=TSR[11]; TALUH[11:0]=TA[13:2]; TSR[11]=TA[1];
											end
											
									4'b0011:
											begin
												TALUH[13]=TA[1]; TALUH[12]=TA[0];TALUH[11]=TSR[11];TALUH[10:0]=TA[13:3];TSR[11]=TA[2];
											end
									
									4'b0100:
											begin
												TALUH[13]=TA[2];	TALUH[12]=TA[1];	TALUH[11]=TA[0];	TALUH[10]=TSR[11];	TALUH[9:0]=TA[13:4];	TSR[11]=TA[3];
											end
									
									4'b0101:
											begin
												TALUH[13]=TA[3];TALUH[12]=TA[2];TALUH[11]=TA[1];TALUH[10]=TA[0];TALUH[9]=TSR[11];TALUH[8:0]=TA[13:5];
												TSR[11]=TA[4];
											end
										
									4'b0110:
											begin
												TALUH[13]=TA[4];TALUH[12]=TA[3];TALUH[11]=TA[2];TALUH[10]=TA[1];TALUH[9]=TA[0];TALUH[8]=TSR[11];TALUH[7:0]=TA[13:6];
												TSR[11]=TA[5];
											end
										
									4'b0111:
											begin
												TALUH[13]=TA[5];TALUH[12]=TA[4];TALUH[11]=TA[3];TALUH[10]=TA[2];TALUH[9]=TA[1];TALUH[8]=TA[0];TALUH[7]=TSR[11];TALUH[6:0]=TA[13:7];TSR[11]=TA[6];
											end
											
												
									4'b1000:
											begin
												TALUH[13]=TA[6];TALUH[12]=TA[5];TALUH[11]=TA[4];TALUH[10]=TA[3];TALUH[9]=TA[2];TALUH[8]=TA[1];TALUH[7]=TA[0];TALUH[6]=TSR[11];TALUH[5:0]=TA[13:8];TSR[11]=TA[7];
											end
											
									4'b1001:
											begin
												TALUH[13]=TA[7];TALUH[12]=TA[6];TALUH[11]=TA[5];TALUH[10]=TA[4];TALUH[9]=TA[3];TALUH[8]=TA[2];TALUH[7]=TA[1];TALUH[6]=TA[0];TALUH[5]=TSR[11];TALUH[4:0]=TA[13:9];TSR[11]=TA[8];
											end
											
									4'b1010:
											begin
												TALUH[13]=TA[8];TALUH[12]=TA[7];TALUH[11]=TA[6];TALUH[10]=TA[5];TALUH[9]=TA[4];TALUH[8]=TA[3];TALUH[7]=TA[2];TALUH[6]=TA[1];TALUH[5]=TA[0];TALUH[4]=TSR[11];TALUH[3:0]=TA[13:10];TSR[11]=TA[9];
											end
											
									4'b1011:
											begin
												TALUH[13]=TA[9];TALUH[12]=TA[8];TALUH[11]=TA[7];TALUH[10]=TA[6];TALUH[9]=TA[5];TALUH[8]=TA[4];TALUH[7]=TA[3];TALUH[6]=TA[2];TALUH[5]=TA[1];TALUH[4]=TA[0];TALUH[3]=TSR[11];TALUH[2:0]=TA[13:11];TSR[11]=TA[10];
											end
											
									4'b1100:
											begin
												TALUH[13]=TA[10];TALUH[12]=TA[9];TALUH[11]=TA[8];TALUH[10]=TA[7];TALUH[9]=TA[6];TALUH[8]=TA[5];TALUH[7]=TA[4];TALUH[6]=TA[3];TALUH[5]=TA[2];TALUH[4]=TA[1];TALUH[3]=TA[0];TALUH[2]=TSR[11];TALUH[1:0]=TA[13:12];TSR[11]=TA[11];
											end
												
																			
									4'b1101:
											begin
													TALUH[13]=TA[11];TALUH[12]=TA[10];TALUH[11]=TA[9];TALUH[10]=TA[8];TALUH[9]=TA[7];TALUH[8]=TA[6];TALUH[7]=TA[5];TALUH[6]=TA[4];TALUH[5]=TA[3];TALUH[4]=TA[2];TALUH[3]=TA[1];TALUH[2]=TA[0];TALUH[1]=TSR[11];TALUH[0]=TA[13];TSR[11]=TA[12];
											end
									4'b1110:
											begin
													TALUH[13]=TA[12];TALUH[12]=TA[11];TALUH[11]=TA[10];TALUH[10]=TA[9];TALUH[9]=TA[8];TALUH[8]=TA[7];TALUH[7]=TA[6];TALUH[6]=TA[5];TALUH[5]=TA[4];TALUH[4]=TA[3];TALUH[3]=TA[2];TALUH[2]=TA[1];TALUH[1]=TA[0];TALUH[0]= TSR[11];TSR[11]=TA[13];
											end
									4'b111:
											begin
												TALUH = TA; 
											end
											endcase
										end
							
										
								RRV_IC:
									begin
									case (IR[7:4])
									4'b0000:
											begin
												TALUH = TA; 
											end
											
									4'b0001:
											begin
												TALUH[13]=TSR[9]; TALUH[12:0]=TA[13:1]; TSR[9]=TA[0];
											end
											
									4'b0010:
											begin
												TALUH[13]=TA[0]; TALUH[12]=TSR[9]; TALUH[11:0]=TA[13:2]; TSR[9]=TA[1];
											end
											
									4'b0011:
											begin
												TALUH[13]=TA[1]; TALUH[12]=TA[0];TALUH[11]=TSR[9];TALUH[10:0]=TA[13:3];TSR[9]=TA[2];
											end
									
									4'b0100:
											begin
												TALUH[13]=TA[2];TALUH[12]=TA[1];TALUH[11]=TA[0];TALUH[10]=TSR[9];TALUH[9:0]=TA[13:4];TSR[9]=TA[3];
											end
									
									4'b0101:
											begin
												TALUH[13]=TA[3];TALUH[12]=TA[2];TALUH[11]=TA[1];TALUH[10]=TA[0];TALUH[9]=TSR[9];TALUH[8:0]=TA[13:5];
												TSR[9]=TA[4];
											end
										
									4'b0110:
											begin
												TALUH[13]=TA[4];TALUH[12]=TA[3];TALUH[11]=TA[2];TALUH[10]=TA[1];TALUH[9]=TA[0];TALUH[8]=TSR[9];TALUH[7:0]=TA[13:6];
												TSR[9]=TA[5];
											end
										
									4'b0111:
											begin
												TALUH[13]=TA[5];TALUH[12]=TA[4];TALUH[11]=TA[3];TALUH[10]=TA[2];TALUH[9]=TA[1];TALUH[8]=TA[0];TALUH[7]=TSR[9];TALUH[6:0]=TA[13:7];TSR[9]=TA[6];
											end
											
												
									4'b1000:
											begin
												TALUH[13]=TA[6];TALUH[12]=TA[5];TALUH[11]=TA[4];TALUH[10]=TA[3];TALUH[9]=TA[2];TALUH[8]=TA[1];TALUH[7]=TA[0];TALUH[6]=TSR[9];TALUH[5:0]=TA[13:8];TSR[9]=TA[7];
											end
											
									4'b1001:
											begin
												TALUH[13]=TA[7];TALUH[12]=TA[6];TALUH[11]=TA[5];TALUH[10]=TA[4];TALUH[9]=TA[3];TALUH[8]=TA[2];TALUH[7]=TA[1];TALUH[6]=TA[0];TALUH[5]=TSR[9];TALUH[4:0]=TA[13:9];TSR[9]=TA[8];
											end
											
									4'b1010:
											begin
												TALUH[13]=TA[8];TALUH[12]=TA[7];TALUH[11]=TA[6];TALUH[10]=TA[5];TALUH[9]=TA[4];TALUH[8]=TA[3];TALUH[7]=TA[2];TALUH[6]=TA[1];TALUH[5]=TA[0];TALUH[4]=TSR[9];TALUH[3:0]=TA[13:10];TSR[9]=TA[9];
											end
											
									4'b1011:
											begin
												TALUH[13]=TA[9];TALUH[12]=TA[8];TALUH[11]=TA[7];TALUH[10]=TA[6];TALUH[9]=TA[5];TALUH[8]=TA[4];TALUH[7]=TA[3];TALUH[6]=TA[2];TALUH[5]=TA[1];TALUH[4]=TA[0];TALUH[3]=TSR[9];TALUH[2:0]=TA[13:11];TSR[9]=TA[10];
											end
											
									4'b1100:
											begin
												TALUH[13]=TA[10];TALUH[12]=TA[9];TALUH[11]=TA[8];TALUH[10]=TA[7];TALUH[9]=TA[6];TALUH[8]=TA[5];TALUH[7]=TA[4];TALUH[6]=TA[3];TALUH[5]=TA[2];TALUH[4]=TA[1];TALUH[3]=TA[0];TALUH[2]=TSR[9];TALUH[1:0]=TA[13:12];TSR[9]=TA[11];
											end
												
																			
									4'b1101:
											begin
													TALUH[13]=TA[11];TALUH[12]=TA[10];TALUH[11]=TA[9];TALUH[10]=TA[8];TALUH[9]=TA[7];TALUH[8]=TA[6];TALUH[7]=TA[5];TALUH[6]=TA[4];TALUH[5]=TA[3];TALUH[4]=TA[2];TALUH[3]=TA[1];TALUH[2]=TA[0];TALUH[1]=TSR[9];TALUH[0]=TA[13];TSR[9]=TA[12];
											end
									4'b1110:
											begin
													TALUH[13]=TA[12];TALUH[12]=TA[11];TALUH[11]=TA[10];TALUH[10]=TA[9];TALUH[9]=TA[8];TALUH[8]=TA[7];TALUH[7]=TA[6];TALUH[6]=TA[5];TALUH[5]=TA[4];TALUH[4]=TA[3];TALUH[3]=TA[2];TALUH[2]=TA[1];TALUH[1]=TA[0];TALUH[0]= TSR[9];TSR[9]=TA[13];
											end
									4'b1111:
											begin
												TALUH = TA; 
											end
											endcase
										end	
											
											
											
											
											
											
											
									
											
											
											
											
											
								 default:
									MC = MC0;
							endcase
							MC = MC3;
						 end
//----------------------------------------------------------------------------
						 MC3:	begin
							case (IR[13:8])
									RET_IC:
										begin
											PC		= DM_out; 
										end
									CALL_IC:
										begin
											MAeff = SP ;
											DM_in = SR ;
											PC = X;
											
										end
											
									LD_IC:
										begin
											if (MAeff[13:4] == 10'hFFF)
											if (MAeff[3:0] == 4'hF)
												R[IR[3:0]] = SP;
											else
												R[IR[3:0]] = {9'b00000000000, SW_pin};												
											else
											R[IR[3:0]] = DM_out;
										end
								 
									ST_IC:
										begin
										if (MAeff[13:4] == 10'hFFF)
											if (MAeff[3:0] == 4'hF)
												SP = R[IR[3:0]];
											else
												Display_pin = R[IR[3:0]][7:0];												
										else
											MC = MC0;
										end
						
									SWAP_IC:
										begin
											R[Rj]= TALUH;
											R[Ri]= TALUL;
										end
									CPY_IC:
										begin
											R[Ri]= TALUL;
										end
									ADD_IC, SUB_IC, ADDC_IC, SUBC_IC, MUL_IC, DIV_IC, NOT_IC, AND_IC, OR_IC, XOR_IC, SHRL_IC, SHRA_IC, ROTL_IC, ROTR_IC, RLC_IC, RLV_IC, RRC_IC, RRV_IC:
										begin
											R[Ri] = TALUH;
											SR = TSR;
										end
								   DIV_IC,MUL_IC:
										begin
											R[Ri]=TALUH;
											R[Rj]=TALUL;
											end
									 JMP_IC:
									begin
										case (IR[3:0])
											JU:
												begin
													PC = MAeff;
												end
											JC1:
												begin
													if (SR[11] == 1)
													PC = MAeff;
													else
													PC = PC;
												end
											JN1:
												begin
													if (SR[10] == 1)
													PC = MAeff;
													else
													PC = PC;
												end
											JV1:
												begin
													if (SR[9] == 1)
													PC = MAeff;
													else
													PC = PC;
												end
											JZ1:
												begin
													if (SR[8] == 1)
													PC = MAeff;
													else
													PC = PC;
												end
											JC0:
												begin
													if (SR[11] == 0)
													PC = MAeff;
													else
													PC = PC;
												end
											JN0:
												begin
													if (SR[10] == 0)
													PC = MAeff;
													else
													PC = PC;
												end
											JV0:
												begin
													if (SR[9] == 0)
													PC = MAeff;
													else
													PC = PC;
												end
											JZ0:
												begin
													if (SR[8] == 0)
													PC = MAeff;
													else
													PC = PC;
												end
										endcase
									end
								 default:
								 
									MC = MC0;
							endcase
							MC = MC0;
						 end
						 default:
							MC = MC0;
					endcase
				end
				
endmodule
