import re
import argparse
def opcode():
    global a
    global q

    if a == "ADD":
        a = "00"
        q = "add operation with operands"
    elif a == "SUB":
        a = "01"
        q = "sub operation with operands"
    elif a == "ADDC":
        a = "02"
        q = "add with constant"
    elif a == "SUBC":
        a = "03"
        q = "sub with constant"
    elif a == "NOT":
        a = "04"
        q = "not operation with operands"
    elif a == "AND":
        a = "05"
        q = "and operation with operands"
    elif a == "OR":
        a = "06"
        q = "or operation with operands"
    elif a == "SHRL":
        a = "07"
        q = " SHRL operaton with operands"
    elif a == "SHRA":
        a = "08"
        q = "SHRA operation with operands"
    elif a == "ROTL":
        a = "09"
        q = "ROTL operation with operands"
    elif a == "ROTR":
        a = "0A"
        q = "ROTR operation with operands"
    elif a == "RRC":
        a = "0B"
        q = "RRC operation with operands"
    elif a == "RRV":
        a = "0C"
        q = "RRV operation with operands"
    elif a == "RLC":
        a = "0D"
        q = " RLC operation with operands"
    elif a == "RLV":
        a = "0D"
        q = "RLV operation with operands"
    elif a == "MUL":
        a = "0F"
        q = "MUL operation with operands"
    elif a == "DIV":
        a = "10"
        q = "div operation with operands"
    elif a == "XOR":
        a = "11"
        q = "XOR operation with operands"
def reg():
    global b
    global w

    if b == "R1":
        b = "1"
        w = "r1"

    elif b  == "R2":
        b = "2"
        w = "r2"

    elif b == "R3":
        b = "3"
        w = "r3"

    elif b == "R4":
        b = "4"
        w = "r4"

    elif b =="R5":
        b = "5"
        w = "r5"

    elif b == "R6":
        b = "6"
        w = "r6"

    elif b == "R7":
        b = "7"
        w = "r7"

    elif b == "R8":
        b = "8"
        w = "r8"

    elif b == "R9":
        b = "9"
        w = "r9"

    elif b == "R10":
        b = "A"
        w = "r10"

    elif b == "R11":
        b = "B"
        w = "r11"

    elif b == "R12":
        b = "C"
        w = "r12"

    elif b == "R13":
        b = "D"
        w = "r13"

    elif b == "R14":
        b = "E"
        w = "r14"

    elif b == "R15":
        b = "F"
        w = "r15"

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--inp", help = "Enter the assembly file name")
    parser.add_argument("--out", help = "Enter a file name where u want the output")

    args = parser.parse_args()
    infile = (args.inp)
    outfile = (args.out)
    infile= str(infile)
    outfile = str(outfile)

    if ((infile != "None") & (outfile != "None")):
        print " correct values "
    else:
        print " please provide input file and output file\n\n inp = file where you have assembly code\n"
        print " out = file where you want decoded values\n"
        print " Make sure you add extension if file has any\n"
        print " Example: dab8730.py --inp 'xyz' --out 'abc'\n"


def process():
    iw = -1
    f = open(outfile, "w")
    f.write("-- This is the mif file generated by the assembler\n-- The assember was programmed in python by Dinesh\n\n\n")
    f.write("WIDTH=14;\nDEPTH=1024;\nADDRESS_RADIX=HEX;\nDATA_RADIX=HEX;\n\n\n\nCONTENT BEGIN\n")
    f.close()

    f1 = open(infile , 'r+')
    data=f1.readlines()
    f1.close()

    db = [ 'ADD', 'SUB' , 'ADDC', 'SUBC', 'OR', 'AND', 'NOT', 'SHRL', 'SHRA', 'ROTL', 'ROTR', 'RRC', 'RRV', 'RLC', 'RLV', 'MUL', 'DIV', 'XOR']
    db1 = ['R1','R2', 'R3', 'R4', 'R5', 'R6', 'R7', 'R8', 'R9','R10', 'R11', 'R12', 'R13', 'R14', 'R15']
    num_lines = sum(1 for line in open('assemblycode'))
    for x in range (num_lines):

        line = data [x]
#    print line
        if line == "\n":
            x += 1
        else:
            iw += 1

            line = line.split()
#        print line
            hexa = line[4]

# ***** CONVERSION FOR LAST VARIABLE *****
            if "0X" in hexa:
                r2 = hexa
                hexa = hexa.replace("0X", "")

#            c = int(hexa,16)
                c = str(hexa)


            else:
                c = hexa.split(' ')
                c = list(set(c).intersection(db1))
                c = " ".join(c)
                b = c
                reg()
                c = b
                r2 = w

# *****  CONVERSION FOR INSTRUCTION AND FIRST VARIABLE ******


            a= list(set (db) & set (line))
            a = " ".join(a)
            b = line[2]
            reg()
            opcode()
            r1 = w
            l = []
# ************* File writing for loop *************
            ir = hex(iw)
            ir = str ( ir )
            ir = ir.replace("0x","")

            p = (ir+"       " + a + b + c+ "    %"+ " "+q +" "+ r1 +" ,"+ r2 +" %")
            p = str(p)
            f = open(outfile, "a")
            f.writelines(p + "\n")
            f.close()



